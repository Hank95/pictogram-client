{"ast":null,"code":"var _jsxFileName = \"/Users/Henry1/Development/code/Mod2/pictogram/src/Components/SketchPad.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport StyleBar from \"./StyleBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SketchPad = ({\n  handleSave\n}) => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [canvas, setCanvas] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [formData, setFormData] = useState({\n    color: \"\",\n    stroke: 3\n  });\n\n  const handleData = e => {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleChange = e => {\n    setTitle(e.target.value);\n  };\n\n  let pathsry = [];\n  let points = [];\n  let mouse = {\n    x: 0,\n    y: 0\n  };\n  let previous = {\n    x: 0,\n    y: 0\n  };\n  useEffect(() => {\n    const newCanvas = canvasRef.current;\n    newCanvas.width = 500;\n    newCanvas.height = 500;\n    newCanvas.style.width = `${500}px`;\n    newCanvas.style.height = `${500}px`;\n    newCanvas.style.border = \"3px solid black\";\n    newCanvas.fillStyle = \"white\";\n    setCanvas(newCanvas);\n  }, []);\n  useEffect(() => {\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      context.scale(1, 1);\n      context.lineCap = \"round\";\n      context.strokeStyle = formData.color;\n      context.lineWidth = formData.stroke;\n      context.fillStyle = \"white\";\n      contextRef.current = context;\n    }\n  }, [canvas, formData.color, formData.stroke]); // a function to detect the mouse position\n\n  function oMousePos(canvas, evt) {\n    var ClientRect = canvas.getBoundingClientRect();\n    return {\n      //objeto\n      x: Math.round(evt.clientX - ClientRect.left),\n      y: Math.round(evt.clientY - ClientRect.top)\n    };\n  }\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const endDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  const undoCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    console.log(context.strock);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sketch\",\n    children: [/*#__PURE__*/_jsxDEV(StyleBar, {\n      handleData: handleData,\n      formData: formData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"title\",\n      for: \"title\",\n      children: \"Title:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inputField\",\n      type: \"text\",\n      name: \"title\",\n      onChange: handleChange,\n      placeholder: \"Your Masterpiece\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      onMouseDown: startDrawing,\n      onMouseUp: endDrawing,\n      onMouseMove: draw,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"saveBtn\",\n      onClick: e => handleSave(e, title),\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"clearBtn\",\n      onClick: clearCanvas,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"undoBtn\",\n      onClick: undoCanvas,\n      children: \"Undo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SketchPad, \"2CvAyMMrxZUf4YRZm0lUgsWiKr8=\");\n\n_c = SketchPad;\nexport default SketchPad;\n\nvar _c;\n\n$RefreshReg$(_c, \"SketchPad\");","map":{"version":3,"sources":["/Users/Henry1/Development/code/Mod2/pictogram/src/Components/SketchPad.js"],"names":["React","useEffect","useRef","useState","StyleBar","SketchPad","handleSave","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","setCanvas","title","setTitle","formData","setFormData","color","stroke","handleData","e","target","name","value","handleChange","pathsry","points","mouse","x","y","previous","newCanvas","current","width","height","style","border","fillStyle","context","getContext","scale","lineCap","strokeStyle","lineWidth","oMousePos","evt","ClientRect","getBoundingClientRect","Math","round","clientX","left","clientY","top","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","endDrawing","closePath","draw","lineTo","clearCanvas","fillRect","undoCanvas","console","log","strock"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport StyleBar from \"./StyleBar\";\nconst SketchPad = ({ handleSave }) => {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [canvas, setCanvas] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [formData, setFormData] = useState({\n    color: \"\",\n    stroke: 3,\n  });\n\n  const handleData = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleChange = (e) => {\n    setTitle(e.target.value);\n  };\n\n  let pathsry = [];\n  let points = [];\n  let mouse = { x: 0, y: 0 };\n  let previous = { x: 0, y: 0 };\n\n  useEffect(() => {\n    const newCanvas = canvasRef.current;\n    newCanvas.width = 500;\n    newCanvas.height = 500;\n    newCanvas.style.width = `${500}px`;\n    newCanvas.style.height = `${500}px`;\n    newCanvas.style.border = \"3px solid black\";\n    newCanvas.fillStyle = \"white\";\n    setCanvas(newCanvas);\n  }, []);\n  useEffect(() => {\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      context.scale(1, 1);\n      context.lineCap = \"round\";\n      context.strokeStyle = formData.color;\n      context.lineWidth = formData.stroke;\n      context.fillStyle = \"white\";\n      contextRef.current = context;\n    }\n  }, [canvas, formData.color, formData.stroke]);\n\n  // a function to detect the mouse position\n  function oMousePos(canvas, evt) {\n    var ClientRect = canvas.getBoundingClientRect();\n    return {\n      //objeto\n      x: Math.round(evt.clientX - ClientRect.left),\n      y: Math.round(evt.clientY - ClientRect.top),\n    };\n  }\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n  const endDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  const undoCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    console.log(context.strock);\n  };\n\n  return (\n    <div className=\"sketch\">\n      <StyleBar handleData={handleData} formData={formData} />\n      <label className=\"title\" for=\"title\">\n        Title:\n      </label>\n      <input\n        className=\"inputField\"\n        type=\"text\"\n        name=\"title\"\n        onChange={handleChange}\n        placeholder=\"Your Masterpiece\"\n      />\n      <canvas\n        className=\"canvas\"\n        onMouseDown={startDrawing}\n        onMouseUp={endDrawing}\n        onMouseMove={draw}\n        ref={canvasRef}\n      />\n      <button className=\"saveBtn\" onClick={(e) => handleSave(e, title)}>\n        Save\n      </button>\n      <button className=\"clearBtn\" onClick={clearCanvas}>\n        Clear\n      </button>\n      <button className=\"undoBtn\" onClick={undoCanvas}>\n        Undo\n      </button>\n    </div>\n  );\n};\n\nexport default SketchPad;\n"]},"metadata":{},"sourceType":"module"}