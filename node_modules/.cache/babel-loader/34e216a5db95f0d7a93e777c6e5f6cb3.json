{"ast":null,"code":"var _jsxFileName = \"/Users/Henry1/Development/code/Mod2/pictogram/src/Components/SketchPad.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SketchPad = ({\n  formData,\n  handleSave\n}) => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 500;\n    canvas.height = 500;\n    canvas.style.width = `${500}px`;\n    canvas.style.height = `${500}px`;\n    canvas.style.border = \"3px solid black\";\n    canvas.fillStyle = \"white\";\n    const context = canvas.getContext(\"2d\");\n    context.scale(1, 1);\n    context.lineCap = \"round\";\n    context.strokeStyle = formData.color;\n    context.lineWidth = formData.stroke;\n    context.fillStyle = \"white\";\n    contextRef.current = context;\n  }, [formData.color, formData.stroke]);\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n    console.log(offsetX, offsetY);\n  };\n\n  const endDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    contextRef.current.save();\n    console.log(contextRef.current);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      onMouseDown: startDrawing,\n      onMouseUp: endDrawing,\n      onMouseMove: draw,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearCanvas,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SketchPad, \"gX+PwV6uGFVV0Nk+m7BEZwABNTU=\");\n\n_c = SketchPad;\nexport default SketchPad;\n\nvar _c;\n\n$RefreshReg$(_c, \"SketchPad\");","map":{"version":3,"sources":["/Users/Henry1/Development/code/Mod2/pictogram/src/Components/SketchPad.js"],"names":["React","useEffect","useRef","useState","SketchPad","formData","handleSave","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","current","width","height","style","border","fillStyle","context","getContext","scale","lineCap","strokeStyle","color","lineWidth","stroke","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","console","log","endDrawing","closePath","draw","lineTo","save","clearCanvas","fillRect"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst SketchPad = ({ formData, handleSave }) => {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 500;\n    canvas.height = 500;\n    canvas.style.width = `${500}px`;\n    canvas.style.height = `${500}px`;\n    canvas.style.border = \"3px solid black\";\n    canvas.fillStyle = \"white\";\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(1, 1);\n    context.lineCap = \"round\";\n    context.strokeStyle = formData.color;\n    context.lineWidth = formData.stroke;\n    context.fillStyle = \"white\";\n    contextRef.current = context;\n  }, [formData.color, formData.stroke]);\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n    console.log(offsetX, offsetY);\n  };\n  const endDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    contextRef.current.save();\n    console.log(contextRef.current);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return (\n    <div>\n      <canvas\n        onMouseDown={startDrawing}\n        onMouseUp={endDrawing}\n        onMouseMove={draw}\n        ref={canvasRef}\n      />\n      <button onClick={handleSave}>Save</button>\n      <button onClick={clearCanvas}>Clear</button>\n    </div>\n  );\n};\n\nexport default SketchPad;\n"]},"metadata":{},"sourceType":"module"}