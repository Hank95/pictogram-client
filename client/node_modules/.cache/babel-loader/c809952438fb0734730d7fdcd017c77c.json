{"ast":null,"code":"var _jsxFileName = \"/Users/Henry1/Development/code/Mod2/pictogram/src/Components/SketchPad.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport StyleBar from \"./StyleBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SketchPad = ({\n  handleSave\n}) => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [canvas, setCanvas] = useState(null);\n  const [formData, setFormData] = useState({\n    color: \"\",\n    stroke: 3\n  });\n\n  const handleData = e => {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  useEffect(() => {\n    const newCanvas = canvasRef.current;\n    newCanvas.width = 500;\n    newCanvas.height = 500;\n    newCanvas.style.width = `${500}px`;\n    newCanvas.style.height = `${500}px`;\n    newCanvas.style.border = \"3px solid black\";\n    newCanvas.fillStyle = \"white\";\n    setCanvas(newCanvas);\n  }, []);\n  useEffect(() => {\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      context.scale(1, 1);\n      context.lineCap = \"round\";\n      context.strokeStyle = formData.color;\n      context.lineWidth = formData.stroke;\n      context.fillStyle = \"white\";\n      contextRef.current = context;\n    }\n  }, [canvas, formData.color, formData.stroke]);\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n    console.log(offsetX, offsetY);\n  };\n\n  const endDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    contextRef.current.save();\n  };\n\n  console.log(canvas);\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sketch\",\n    children: [/*#__PURE__*/_jsxDEV(StyleBar, {\n      handleData: handleData,\n      formData: formData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      onMouseDown: startDrawing,\n      onMouseUp: endDrawing,\n      onMouseMove: draw,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearCanvas,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SketchPad, \"bmyhfy8cNbSpbAmjoXbF0sK9SlY=\");\n\n_c = SketchPad;\nexport default SketchPad;\n\nvar _c;\n\n$RefreshReg$(_c, \"SketchPad\");","map":{"version":3,"sources":["/Users/Henry1/Development/code/Mod2/pictogram/src/Components/SketchPad.js"],"names":["React","useEffect","useRef","useState","StyleBar","SketchPad","handleSave","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","setCanvas","formData","setFormData","color","stroke","handleData","e","target","name","value","newCanvas","current","width","height","style","border","fillStyle","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","console","log","endDrawing","closePath","draw","lineTo","save","clearCanvas","fillRect"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport StyleBar from \"./StyleBar\";\nconst SketchPad = ({ handleSave }) => {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [canvas, setCanvas] = useState(null);\n\n  const [formData, setFormData] = useState({\n    color: \"\",\n    stroke: 3,\n  });\n\n  const handleData = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  useEffect(() => {\n    const newCanvas = canvasRef.current;\n    newCanvas.width = 500;\n    newCanvas.height = 500;\n    newCanvas.style.width = `${500}px`;\n    newCanvas.style.height = `${500}px`;\n    newCanvas.style.border = \"3px solid black\";\n    newCanvas.fillStyle = \"white\";\n    setCanvas(newCanvas);\n  }, []);\n  useEffect(() => {\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      context.scale(1, 1);\n      context.lineCap = \"round\";\n      context.strokeStyle = formData.color;\n      context.lineWidth = formData.stroke;\n      context.fillStyle = \"white\";\n      contextRef.current = context;\n    }\n  }, [canvas, formData.color, formData.stroke]);\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n    console.log(offsetX, offsetY);\n  };\n  const endDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    contextRef.current.save();\n  };\n  console.log(canvas);\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return (\n    <div className=\"sketch\">\n      <StyleBar handleData={handleData} formData={formData} />\n      <canvas\n        className=\"canvas\"\n        onMouseDown={startDrawing}\n        onMouseUp={endDrawing}\n        onMouseMove={draw}\n        ref={canvasRef}\n      />\n      <button onClick={handleSave}>Save</button>\n      <button onClick={clearCanvas}>Clear</button>\n    </div>\n  );\n};\n\nexport default SketchPad;\n"]},"metadata":{},"sourceType":"module"}