{"ast":null,"code":"var _jsxFileName = \"/Users/Henry1/Development/code/Mod2/pictogram/src/Components/SketchPad.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport StyleBar from \"./StyleBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SketchPad = ({\n  handleSave\n}) => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [canvas, setCanvas] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [points, setPoints] = useState([]);\n  const [pathAry, setPathAry] = useState([]);\n  const [formData, setFormData] = useState({\n    color: \"\",\n    stroke: 3\n  });\n\n  const handleData = e => {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleChange = e => {\n    setTitle(e.target.value);\n  };\n\n  useEffect(() => {\n    const newCanvas = canvasRef.current;\n    newCanvas.width = 500;\n    newCanvas.height = 500;\n    newCanvas.style.width = `${500}px`;\n    newCanvas.style.height = `${500}px`;\n    newCanvas.style.border = \"3px solid black\";\n    newCanvas.fillStyle = \"white\";\n    setCanvas(newCanvas);\n  }, []);\n  useEffect(() => {\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      context.scale(1, 1);\n      context.lineCap = \"round\";\n      context.strokeStyle = formData.color;\n      context.lineWidth = formData.stroke;\n      context.fillStyle = \"white\";\n      contextRef.current = context;\n    }\n  }, [canvas, formData.color, formData.stroke]);\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n    setPoints([]);\n  };\n\n  const endDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    setPathAry([...pathAry, points]);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    setPoints([...points, {\n      offsetX,\n      offsetY,\n      formData\n    }]);\n  };\n\n  const drawPaths = () => {\n    // delete everything\n    contextRef.current.clearRect(0, 0, canvas.width, canvas.height); // draw all the paths in the paths array\n\n    pathAry.forEach(path => {\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(path[0].offsetX, path[0].offsetY);\n\n      for (let i = 1; i < path.length; i++) {\n        contextRef.current.strokeStyle = path[i].formData.color;\n        contextRef.current.lineWidth = path[i].formData.stroke;\n        contextRef.current.lineTo(path[i].offsetX, path[i].offsetY);\n      }\n\n      contextRef.current.stroke();\n    });\n  };\n\n  const Undo = () => {\n    // remove the last path from the paths array\n    pathAry.splice(-1, 1); // draw all the paths in the paths array\n\n    drawPaths();\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sketch\",\n    children: [/*#__PURE__*/_jsxDEV(StyleBar, {\n      handleData: handleData,\n      formData: formData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"sketchContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"canvas\",\n        onMouseDown: startDrawing,\n        onMouseUp: endDrawing,\n        onMouseMove: draw,\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvasControls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"title\",\n          for: \"title\",\n          children: \"Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"inputField\",\n          type: \"text\",\n          name: \"title\",\n          onChange: handleChange,\n          placeholder: \"Your Masterpiece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"saveBtn\",\n          onClick: e => handleSave(e, title),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clearBtn\",\n          onClick: clearCanvas,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"undoBtn\",\n          onClick: Undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SketchPad, \"D1rPxRIPF6vopm5p0lTlY7w73TY=\");\n\n_c = SketchPad;\nexport default SketchPad;\n\nvar _c;\n\n$RefreshReg$(_c, \"SketchPad\");","map":{"version":3,"sources":["/Users/Henry1/Development/code/Mod2/pictogram/src/Components/SketchPad.js"],"names":["React","useEffect","useRef","useState","StyleBar","SketchPad","handleSave","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","setCanvas","title","setTitle","points","setPoints","pathAry","setPathAry","formData","setFormData","color","stroke","handleData","e","target","name","value","handleChange","newCanvas","current","width","height","style","border","fillStyle","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","endDrawing","closePath","draw","lineTo","drawPaths","clearRect","forEach","path","i","length","Undo","splice","clearCanvas","fillRect"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport StyleBar from \"./StyleBar\";\nconst SketchPad = ({ handleSave }) => {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [canvas, setCanvas] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [points, setPoints] = useState([]);\n  const [pathAry, setPathAry] = useState([]);\n\n  const [formData, setFormData] = useState({\n    color: \"\",\n    stroke: 3,\n  });\n\n  const handleData = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleChange = (e) => {\n    setTitle(e.target.value);\n  };\n\n  useEffect(() => {\n    const newCanvas = canvasRef.current;\n    newCanvas.width = 500;\n    newCanvas.height = 500;\n    newCanvas.style.width = `${500}px`;\n    newCanvas.style.height = `${500}px`;\n    newCanvas.style.border = \"3px solid black\";\n    newCanvas.fillStyle = \"white\";\n    setCanvas(newCanvas);\n  }, []);\n  useEffect(() => {\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      context.scale(1, 1);\n      context.lineCap = \"round\";\n      context.strokeStyle = formData.color;\n      context.lineWidth = formData.stroke;\n      context.fillStyle = \"white\";\n      contextRef.current = context;\n    }\n  }, [canvas, formData.color, formData.stroke]);\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n    setPoints([]);\n  };\n  const endDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    setPathAry([...pathAry, points]);\n  };\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    setPoints([...points, { offsetX, offsetY, formData }]);\n  };\n\n  const drawPaths = () => {\n    // delete everything\n    contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\n    // draw all the paths in the paths array\n    pathAry.forEach((path) => {\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(path[0].offsetX, path[0].offsetY);\n      for (let i = 1; i < path.length; i++) {\n        contextRef.current.strokeStyle = path[i].formData.color;\n        contextRef.current.lineWidth = path[i].formData.stroke;\n\n        contextRef.current.lineTo(path[i].offsetX, path[i].offsetY);\n      }\n      contextRef.current.stroke();\n    });\n  };\n\n  const Undo = () => {\n    // remove the last path from the paths array\n    pathAry.splice(-1, 1);\n    // draw all the paths in the paths array\n    drawPaths();\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return (\n    <div className=\"sketch\">\n      <StyleBar handleData={handleData} formData={formData} />\n      <div id=\"sketchContainer\">\n        <canvas\n          className=\"canvas\"\n          onMouseDown={startDrawing}\n          onMouseUp={endDrawing}\n          onMouseMove={draw}\n          ref={canvasRef}\n        />\n        <div id=\"canvasControls\">\n          <label className=\"title\" for=\"title\">\n            Title:\n          </label>\n          <input\n            className=\"inputField\"\n            type=\"text\"\n            name=\"title\"\n            onChange={handleChange}\n            placeholder=\"Your Masterpiece\"\n          />\n          <button className=\"saveBtn\" onClick={(e) => handleSave(e, title)}>\n            Save\n          </button>\n          <button className=\"clearBtn\" onClick={clearCanvas}>\n            Clear\n          </button>\n          <button className=\"undoBtn\" onClick={Undo}>\n            Undo\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SketchPad;\n"]},"metadata":{},"sourceType":"module"}